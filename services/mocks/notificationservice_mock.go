// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/eriktate/NaaSgul/services (interfaces: NotificationRepo)

package mocks

import (
	entities "github.com/eriktate/NaaSgul/entities"
	models "github.com/eriktate/NaaSgul/services/models"
	gomock "github.com/golang/mock/gomock"
	go_uuid "github.com/satori/go.uuid"
)

// Mock of NotificationRepo interface
type MockNotificationRepo struct {
	ctrl     *gomock.Controller
	recorder *_MockNotificationRepoRecorder
}

// Recorder for MockNotificationRepo (not exported)
type _MockNotificationRepoRecorder struct {
	mock *MockNotificationRepo
}

func NewMockNotificationRepo(ctrl *gomock.Controller) *MockNotificationRepo {
	mock := &MockNotificationRepo{ctrl: ctrl}
	mock.recorder = &_MockNotificationRepoRecorder{mock}
	return mock
}

func (_m *MockNotificationRepo) EXPECT() *_MockNotificationRepoRecorder {
	return _m.recorder
}

func (_m *MockNotificationRepo) CreateNotification(_param0 *entities.Notification) (*models.NotificationDTO, error) {
	ret := _m.ctrl.Call(_m, "CreateNotification", _param0)
	ret0, _ := ret[0].(*models.NotificationDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockNotificationRepoRecorder) CreateNotification(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateNotification", arg0)
}

func (_m *MockNotificationRepo) GetNotificationByID(_param0 go_uuid.UUID) {
	_m.ctrl.Call(_m, "GetNotificationByID", _param0)
}

func (_mr *_MockNotificationRepoRecorder) GetNotificationByID(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNotificationByID", arg0)
}

func (_m *MockNotificationRepo) GetNotificationsBySubject(_param0 string) {
	_m.ctrl.Call(_m, "GetNotificationsBySubject", _param0)
}

func (_mr *_MockNotificationRepoRecorder) GetNotificationsBySubject(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetNotificationsBySubject", arg0)
}
